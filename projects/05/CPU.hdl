// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // instruction handling
    // choose between instruction input bus or ALU output bus
    Mux16(a=instruction,b=ALUOUT,sel=instruction[15],out=aregin);
    Not(in=instruction[15],out=not15);
    // ARegister will load when instruction[15]=0 (A instruction) or when instruction[5]=1 (ARegister destination at c instruction)
    Or(a=not15,b=instruction[5],out=aregload);
    ARegister(in=aregin,load=aregload,out=aregout,out[0..14]=addressM);

    //ALU operation

    // choose between inM or ARegister by instruction[12] (a)
    Mux16(a=aregout,b=inM,sel=instruction[12],out=AorM);

    // DRegister will load when instruction[15]=1 and instruction[4]=1
    And(a=instruction[15],b=instruction[4],out=dregload);
    DRegister(in=ALUOUT,load=dregload,out=dregout);

    // the control bits of the ALU are instruction[11] up to instruction[6]
    ALU(x=dregout,y=AorM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],
    f=instruction[7],no=instruction[6],out=ALUOUT,out=outM,zr=zr,ng=ng);

    //wirite to M
    And(a=instruction[15],b=instruction[3],out=writeM);

    // JUMP logic (control)
    //to get not (zero or negative) will be used down
    Or(a=zr,b=ng,out=notpos);
    Not(in=notpos,out=pos);

    And(a=instruction[0],b=pos,out=j3);// notice that j3 is 1 when instruction[0] is 1 and out is not (zero or negative)
    And(a=instruction[1],b=zr,out=j2);//  notice that j2 is 1 when instruction[1] is 1 and out is zero
    And(a=instruction[2],b=ng,out=j1);//  notice that j2 is 1 when instruction[3] is 1 and out is negative

    // oRing the three different possibilities then and them with instruction[15] to check if the lbit (jump load bit) is 1
    Or(a=j1,b=j2,out=j12);
    Or(a=j12,b=j3,out=j123);
    And(a=j123,b=instruction[15],out=lbit);
    PC(in=aregout,load=lbit,inc=true,reset=reset,out[0..14]=pc);
}
